# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
      - modules/*
      - pipeline-scripts/*
      - pipeline-templates/*
      - azure-pipelines.yml
      - main.tf
      - provider.tf
      - terraform.tfvars
      - variables.tf

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - modules/*
      - pipeline-scripts/*
      - pipeline-templates/*
      - azure-pipelines.yml
      - main.tf
      - provider.tf
      - terraform.tfvars
      - variables.tf

resources:
  repositories:
  - repository: cnp-azuredevops-libraries
    type: github
    ref: refs/heads/dtspo-17345-reinstate-nagger-jg
    name: hmcts/cnp-azuredevops-libraries
    endpoint: 'hmcts'

variables:
  terraformVersion: 1.2.3
  agentPool: 'ubuntu-latest'
  timeoutInMinutes: 60

stages:
  - stage: Precheck
    jobs:
      - job: Precheck
        pool:
          vmImage: ${{ variables.agentPool }}
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-sp-token'
              serviceConnection: 'azurerm-sandbox'

  # - stage: GetArtifacts
  #   jobs:
  #     - template: pipeline-templates/terraform-plan.yaml
  #       parameters:
  #         build: $(Build.BuildNumber)
  #         agentPool: ${{ variables.agentPool }}
  #         terraformVersion: ${{ variables.terraformVersion }}

  #     - job: Archive
  #       pool:
  #         vmImage: ${{ variables.agentPool }}
  #       steps:
  #         - task: CopyFiles@2
  #           displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  #           inputs:
  #             TargetFolder: '$(Build.ArtifactStagingDirectory)'

  #         - task: PublishBuildArtifacts@1
  #           displayName: 'Publish Artifact: drop'

  # - stage: ApplyLaunchdarkly
  #   dependsOn: GetArtifacts
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   jobs:
  #     - template: pipeline-templates/terraform-apply.yaml
  #       parameters:
  #         build: $(Build.BuildNumber)
  #         agentPool: ${{ variables.agentPool }}
  #         terraformVersion: ${{ variables.terraformVersion }}
